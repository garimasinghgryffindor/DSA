long long maximumSizeOfSweets(int n, int k, int s, vector<vector<int>>& a) {
    
    // Declaring integer variables 'lo', 'hi' and 'ans'.
    long long lo = 0, hi = 1e15, ans = 0;
    
    const long long inf = 1e18;
    
    // Applying Binary Search.
    while (lo <= hi) {
        long long mid = (lo + hi) / 2;
        
        // Finding if it is possible to have all sweets size as 'mid'.
        
        // Declaring 'dp' array.
        vector<vector<vector<long long>>> dp(n + 1, vector<vector<ll>>(3, vector<ll>(1 << k, 1e18)));
        
        // Calculating 'dp' states.
        for (int i = 0; i <= n; ++i) {
            for (int j = 0; j < 3; ++j) {
                for (int z = 0; z < (1 << k); ++z) {
                    if (i != 0) {
                        dp[i][j][z] = dp[i - 1][j][z];
                    }
                    
                    // Handling edge-case.
                    if (j == 0) {
                        if (z == 0) {
                            dp[i][j][z] = 0;
                        }
                        continue;
                    }
                    
                    if (i != 0) {
                        for (int cur = z; cur > 0; cur = (cur - 1) & z) {
                            long long sum = 0;
                            for (int b = 0; b < k; ++b) {
                                
                                // Checking if the 'bth' bit is set or not.
                                if ((cur >> b) & 1) {
                                    sum += (mid + a[i - 1][b] - 1) / a[i - 1][b];
                                }
                            }
                            
                            dp[i][j][z] = min(dp[i][j][z], dp[i - 1][j - 1][z ^ cur] + sum);
                        }
                    }
                }
            }
        }
        
        if (dp[n][2][(1 << k) - 1] <= s) {
            ans = mid;
            lo = mid + 1;
        }
        else {
            hi = mid - 1;
        }
    }
    
    return ans;
}
